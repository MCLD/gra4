@model GRA.Controllers.ViewModel.Avatar.DynamicAvatarViewModel

@section styles {
    <style>
        .selected-color {
            border: 4px solid yellow;
        }
    </style>
}

<div class="row">
    <div class="col-xs-3">
        @foreach (var groupId in Model.GroupIds)
        {
            /*<div class="btn-group btn-group-vertical btn-group-lg" style="vertical-align:top;">
                @foreach (var layer in Model.Layers.Where(_ => _.GroupId == groupId))
                {
                    <button type="button"
                            id="@($"selector{layer.Id}")"
                            class="btn btn-default layerSelector"
                            data-layer="@layer.Id"
                            data-removable="@layer.CanBeEmpty"
                            data-selectiontype="@layer.SelectionType"
                            data-item="@layer.SelectedItem"
                            data-color="@layer.SelectedColor">
                        @layer.Name
                    </button>
                }
            </div>*/
            <table>
                @foreach (var layer in Model.Layers.Where(_ => _.GroupId == groupId))
                {
                    <tr>
                        <td>
                            <div class="btn-group btn-group-lg" role="group">
                                <button type="button"
                                        id="@($"selector{layer.Id}")"
                                        class="btn btn-default layerSelector"
                                        style="width: 100px;"
                                        data-layer="@layer.Id"
                                        data-removable="@layer.CanBeEmpty"
                                        data-selectiontype="@layer.SelectionType"
                                        data-item="@layer.SelectedItem"
                                        data-color="@layer.SelectedColor">
                                    @layer.Name
                                </button>
                                @if (layer.CanBeEmpty)
                                {
                                    <button type="button" class="btn btn-danger removeLayer" data-layer="@layer.Id">
                                        <span class="fa fa-minus"></span>
                                    </button>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </table>
        }
        <button id="testbutton">test</button>
    </div>
    <div class="col-xs-6">
        <table style="margin-left:auto; margin-right:auto">
            <tr>
                <td>
                    <button type="button" id="decrease" class="btn btn-link itemSelector" style="display:none;">
                        <span class="fa fa-lg fa-chevron-left"></span>
                    </button>
                </td>
                <td rowspan="3">
                    <div class="dynamic-avatar-container" style="margin-left: auto;margin-right:auto">
                        @foreach (var layer in Model.Layers)
                        {
                            <img src="@layer.FilePath" id="@($"image{layer.Id}")" class="dynamic-avatar-layer" style="z-index: @layer.Position" />
                        }
                    </div>
                </td>
                <td>
                    <button type="button" id="increase" class="btn btn-link itemSelector" style="display:none;">
                        <span class="fa fa-lg fa-chevron-right"></span>
                    </button>
                </td>
            </tr>
        </table>
    </div>
    <div class="col-xs-3">
        <div class="well colorSelector" style="display:none;">
        </div>
    </div>
</div>

@section scripts
{
    <script>
        var baseImagePath = "@Model.ImagePath";
        var layers = $.parseJSON('@Html.Raw(Model.AvatarPiecesJson)').Layers;
        var currentLayerImage;
        var currentLayerSelector;
        var currentLayer;
        var currentIndex;
        var layerPath;
        var selectedItem;
        var selectedColor;
        SetLayer(@Model.DefaultLayer);

        function GetLayerById(layerId) {
            for (var i = 0; i < layers.length; i++) {
                if (layers[i].Id == layerId) {
                    return (layers[i]);
                }
            }
        }

        function SetLayer(layerId) {
            if (currentLayer == undefined || layerId != currentLayer.Id) {
                currentLayerImage = $("#image" + layerId);
                currentLayerSelector = $("#selector" + layerId);
                $(".layerSelector").removeClass("selected");
                currentLayerSelector.addClass("selected");
                currentLayer = GetLayerById(layerId);
                layerPath = baseImagePath + "layer" + layerId + "/item"

                selectedItem = currentLayerSelector.data("item");
                selectedColor = currentLayerSelector.data("color");
                if (selectedItem != "") {
                    currentIndex = currentLayer.Items.indexOf(selectedItem);
                }
                else {
                    currentIndex = undefined;
                }
                $(".colorSelector").empty();
                if (currentLayer.Colors.length > 0) {
                    $.each(currentLayer.Colors, function (i, color) {
                        var colorSpan = $("<span>", { "class": "dynamic-avatar-color-selection", "style": "background-color:#" + color.Value, "data-color": color.Id });
                        if (selectedColor == color) {
                            colorSpan.addClass("selected-color");
                        }
                        $(".colorSelector").append(colorSpan);
                    });
                }

                var selectionType = currentLayerSelector.data("selectiontype");
                if (selectionType & 1) {
                    $(".itemSelector").show();
                }
                else {
                    $(".itemSelector").hide();
                }
                if (selectionType & 2) {
                    $(".colorSelector").show();
                }
                else {
                    $(".colorSelector").hide();
                }
            }
        }

        function SetSelectedItem(item) {
            selectedItem = item;
            currentLayerSelector.data("item", item);
            SetLayerImage();
        }

        function SetSelectedColor(color) {
            selectedColor = color;
            currentLayerSelector.data("color", color);
            SetLayerImage();
        }

        function SetLayerImage() {
            var imagePath = layerPath + selectedItem + "/" + selectedItem;
            if (selectedColor != "") {
                imagePath += "_" + selectedColor;
            }
            imagePath += ".png";
            currentLayerImage.attr("src", imagePath);
        }

        $(".layerSelector").on("click", function () {
            SetLayer($(this).data("layer"));
        });

        $(".removeLayer").on("click", function () {
            var layerId = $(this).data("layer");
            $("#selector" + layerId).data("item", "");
            $("#image" + layerId).removeAttr("src");
            if (layerId == currentLayer.Id) {
                currentIndex = undefined;
            }
        });

        $("#increase").on("click", function () {
            if (currentIndex != undefined) {
                currentIndex++;
                if (currentIndex > currentLayer.Items.length - 1) {
                    currentIndex = 0;
                }
                SetSelectedItem(currentLayer.Items[currentIndex]);
            }
            else {
                currentIndex = 0;
                SetSelectedItem(currentLayer.Items[currentIndex]);
            }
        });

        $("#decrease").on("click", function () {
            if (currentIndex != undefined) {
                currentIndex--;
                if (currentIndex < 0) {
                    currentIndex = currentLayer.Items.length - 1;
                }
                SetSelectedItem(currentLayer.Items[currentIndex]);
            }
            else {
                currentIndex = currentLayer.Items.length - 1;
                SetSelectedItem(currentLayer.Items[currentIndex]);
            }
        });

        $(document).on("click", ".dynamic-avatar-color-selection", function () {
            SetSelectedColor($(this).data("color"));
            $(".selected-color").removeClass("selected-color");
            $(this).addClass("selected-color")
        });

        $("#testbutton").on("click", function (e) {
            var data_array = new Array();
            $(".layerSelector").each(function () {
                var layer = {};
                layer['Id'] = $(this).data("layer");
                layer['SelectedItem'] = $(this).data("item");
                layer['SelectedColor'] = $(this).data("color");
                data_array.push(layer);
            })
            var selectionJson = JSON.stringify(data_array);
            $.post("@Url.Action("SaveAvatar")", { selectionJson: selectionJson }, function (response) {
                if (response.success == true) {
                    alert("yay");
                }
                else {
                    alert("nope");
                }
            }).fail(function () {
                alert("uh oh");
            });
        });
    </script>
}